/* testlist.c */
/* A test harness for the list ADT
 * (c) Paul Field
 * V1.00 - 16/5/1995
 * V1.10 - 15/7/1995 - list pointers now used
 */

#include "list.h"

#include <stdio.h>
#include <stdlib.h>
#include <errno.h>

static void _test_truth(const char *expression, bool value, unsigned line)
 { if (!value)
    { printf("line %u: %s is not true\n", line, expression);
      exit(EXIT_FAILURE);
    }
 }

#define test_truth(a) _test_truth(#a, a, __LINE__)

/* This is a test harness and the only aspect of quality that
 * matters is that every list function is thoroughly tested,
 * thus I happily use test_truth to check things like memory allocation
 */


static void check_functionality(void)
 { int *one, *two, *three;
   list *l;

   test_truth((one   = list_alloc_element(sizeof(int))) != NULL);
   test_truth((two   = list_alloc_element(sizeof(int))) != NULL);
   test_truth((three = list_alloc_element(sizeof(int))) != NULL);
   *one   = 1;
   *two   = 2;
   *three = 3;

   /**** Check list_is_empty ****/
   test_truth(list_create(&l));
   test_truth(list_is_empty(l));
   list_cons(l, one);
   test_truth(!list_is_empty(l));

   /**** Check list_cons (already called)/list_remove_head (l = [1]) ****/
   test_truth(list_remove_head(l) == one);
   test_truth(list_is_empty(l));

   /**** Check list_length (l = []) ****/
   test_truth(list_length(l) == 0);
   list_cons(l, one);
   test_truth(list_length(l) == 1);
   test_truth(list_remove_head(l) == one);
   test_truth(list_length(l) == 0);

   /**** Check list_nth_element (l = []) ****/
   list_cons(l, three);
   list_cons(l, two);
   list_cons(l, one);
   test_truth(list_nth_element(l,1) == one);
   test_truth(list_nth_element(l,2) == two);
   test_truth(list_nth_element(l,3) == three);
   /* Now try reverse order so that cache can't be used */
   test_truth(list_nth_element(l,3) == three);
   test_truth(list_nth_element(l,2) == two);
   test_truth(list_nth_element(l,1) == one);

   /**** 'check' list_free_element & list_destroy l = [1,2,3] ****/
   test_truth(list_remove_head(l) == one);
   test_truth(list_remove_head(l) == two);
   list_free_element(one);
   list_free_element(two);
   list_destroy(l);  /* Should also free 'three' */
 }

static void violate_precondition(unsigned conditionno)
 { list *l, *emptyl, *notcreatedl;
   int *one, *two, *three;
   int *bogus;
   int *notinlist;

   test_truth((one   = list_alloc_element(sizeof(int))) != NULL);
   test_truth((two   = list_alloc_element(sizeof(int))) != NULL);
   test_truth((three = list_alloc_element(sizeof(int))) != NULL);
   test_truth((bogus = malloc(sizeof(int))) != NULL);
   test_truth((notinlist = list_alloc_element(sizeof(int))) != NULL);

   *one = 1; *two = 2;
   test_truth(list_create(&l));
   list_cons(l, two);
   list_cons(l, one);
   test_truth(list_create(&emptyl));

   /* This list is not complete, it serves to test some of the main debugging routines */
   /* but doesn't check that all the routines call the appropriate routines or perform */
   /* the appropriate asserts (it does check some)                                     */
   switch(conditionno)
    { case 1:
        puts("list_free_element: freeing an element that's in a list");
        list_free_element(one);
      case 2:
        puts("list_cons: element not allocated by list_alloc_element");
        list_cons(l, bogus);
      case 3:
        puts("list_cons: element already in list");
        list_cons(l, one);
      case 4:
        puts("list_remove_head: list is empty");
        list_remove_head(emptyl);
      case 5:
        puts("Using a list that hasn't been created. Problem may not get caught - depends on machine/compiler");
        list_is_empty(notcreatedl);
      case 6:
        puts("Using a list that has been destroyed. Problem may not get caught - depends on machine/compiler");
        list_destroy(l);
        list_is_empty(l);
      case 7:
        puts("Various elements and lists have not been deallocated/destroyed");
        /* Nothing - but we have not deallocated the elements & lists
         * so we should get a debugging message
         */
    }
 }


const static char errmess[] =
  "Please give a single integer (0-7) as the program argument\n"
  "0 tests list module, 1-7 test various debugging routines";

int main(int argc, char *argv[])
 { unsigned code;

   if (argc != 2)
    { puts(errmess);
      return EXIT_FAILURE;
    }
   errno = 0;
   code = (unsigned) strtoul(argv[1], NULL, 10);
   if (code > 7 || errno == ERANGE)
    { puts(errmess);
      return EXIT_FAILURE;
    }
   if (code == 0)
    { check_functionality();
      puts("All is well - remember to check with NDEBUG defined and not defined");
    }
   else
    { violate_precondition(code);
    }
   return EXIT_SUCCESS;
 }
