/**** pic_draw.c ****/
/* Handles drawfile pictures
 * (c) Paul Field 1996
 */

#include "pic_draw.h"


#include <assert.h>
#include "drawfile.h"
#include "osargs.h"
#include "osgbpb.h"
#include "osfile.h"
#include "osfind.h"

#include "allocate.h"
#include "exception.h"
#include "shifting.h"

#include "draw_utils.h"


struct draw_pic_str
 { drawfile_diagram *draw;
 };




draw_pic* draw_pic_construct(const char* file_name)
 { int       size;
   bits      file_type;
   draw_pic* pic;

   osfile_read_stamped_no_path(file_name, NULL, NULL, &size, NULL, &file_type);
   assert(file_type == osfile_TYPE_DRAW);

   pic = memory_allocate(sizeof(*pic));
   pic->draw = NULL;   /* It's OK to 'free' a NULL */

   try
    { shifting_allocate((shifting_ptr)&pic->draw, size);
      osfile_load_stamped_no_path(file_name, (byte *)pic->draw, NULL, NULL, NULL, NULL);
    }
   catch
    { draw_pic_destruct(pic);
      throw();
    }
   catch_end

   return pic;
 }




void draw_pic_destruct(draw_pic *pic)
 { if (pic != NULL)
    { shifting_free((shifting_ptr)&pic->draw);
      memory_free(pic);
    }
 }




void draw_pic_draw
 ( const draw_pic* pic,
   int             pic_origin_x,
   int             pic_origin_y,
   unsigned        scale_percent_x,
   unsigned        scale_percent_y,
   const os_box*   clip)
 { os_trfm trfm;
   int     fix_scale_x;
   int     fix_scale_y;
   int     zero_x;
   int     zero_y;

   assert(pic != NULL);

   /* Calculate fixed-point scale factors */
   fix_scale_x = (scale_percent_x << 16)/100;
   fix_scale_y = (scale_percent_y << 16)/100;

   /* pic_origin is the screen position at which we want the bottom left of the
    * draw diagram to appear at. To draw the diagram we need to calculate the screen position
    * at which draw coordinate (0,0) should appear.
    * If the bottom left of the diagram is (x,y) then we simply move by (-x,-y) to get to (0,0)
    * so, to calculate the screen position of (0,0) we simply move by (-x,-y) from pic_origin.
    */
   zero_x = pic_origin_x - (pic->draw->bbox.x0 * scale_percent_x)/100;
   zero_y = pic_origin_y - (pic->draw->bbox.y0 * scale_percent_y)/100;


   /* Create transformation matrix to implement the scaling and translation required */
   trfm.entries[0][0] = fix_scale_x;  trfm.entries[0][1] = 0;
   trfm.entries[1][0] = 0;            trfm.entries[1][1] = fix_scale_y;
   trfm.entries[2][0] = zero_x;       trfm.entries[2][1] = zero_y;

   drawfile_render(0, pic->draw, shifting_size((shifting_ptr)&pic->draw), &trfm, clip, 0);
 }




void draw_pic_size(const draw_pic* pic, unsigned *width, unsigned *height)
 { *width  = (pic->draw->bbox.x1 - pic->draw->bbox.x0);
   *height = (pic->draw->bbox.y1 - pic->draw->bbox.y0);
 }



void draw_pic_add_fonts_to_set(const draw_pic* pic, font_set* fonts)
 { unsigned           font_table_pos;
   drawfile_diagram* const * d;

   d = &pic->draw;

   if (draw_find_font_table(d, shifting_size((shifting_ptr)d), &font_table_pos))
    { draw_font_table_to_set(d, font_table_pos, fonts);
    }
 }



static bool draw_pic_file_find_font_table(os_f file, unsigned* position, unsigned* size)
 /* Searches for the font table in the open draw file 'file'. Returns
  * TRUE iff found. If found, position is the table's position in the file
  * and size is the size (in bytes) of the font table.
  */
 { unsigned pos;
   unsigned file_size;

   file_size = osargs_read_ext(file);
   pos  = offsetof(drawfile_diagram, objects);

   /* Scan through each draw file object */
   while(pos < file_size)
    { struct
       { int type;
         int size;
       }object_header;

      /* Read object's header */
      osgbpb_read_at(file, (byte *)&object_header, sizeof(object_header), pos);

      /* Found the table, so return the details */
      if (object_header.type == drawfile_TYPE_FONT_TABLE)
       { *position = pos;
         *size     = file_size;
         return TRUE;
       }

      /* Move to the next object */
      pos += object_header.size;
    }

   return FALSE;
 }




void draw_pic_file_add_fonts_to_set(const char* file_name, font_set* fonts)
 { os_f file;

   assert(file_name);
   assert(fonts);

   file = osfind_openin(osfind_NO_PATH, file_name, NULL);

   try
    { unsigned table_pos;
      unsigned table_size;

      if (draw_pic_file_find_font_table(file, &table_pos, &table_size))
       { /* Read in the font table */
         drawfile_object *table;

         table = memory_allocate(table_size);
         try
          { osgbpb_read_at(file, (byte *)table, table_size, table_pos);
            /* We don't have a drawfile_diagram but this function just needs a pointer to the font table */
            draw_font_table_to_set((drawfile_diagram **)&table, 0, fonts);
            memory_free(table);
          }
         catch
          { memory_free(table);
            throw();
          }
         catch_end
       }
    }
   catch
    { osfind_close(file);
      throw();
    }
   catch_end
 }




void draw_pic_save
 ( const draw_pic* pic,
   int             pic_origin_x,
   int             pic_origin_y,
   unsigned        scale_percent_x,
   unsigned        scale_percent_y,
   const font_set* fonts
 )
 { byte               map[256];
   unsigned           font_table_pos;
   int                zero_x;
   int                zero_y;
   drawfile_diagram* const* d;

   d = &pic->draw;

   /* Work out the re-mapping for fonts in this diagram, if needed */
   if (draw_find_font_table(d, shifting_size((shifting_ptr)d), &font_table_pos))
    { draw_font_table_mapping(d, font_table_pos, fonts, map);
    }

   /* Calculate the draw diagram's origin */
   zero_x = pic_origin_x - (pic->draw->bbox.x0 * scale_percent_x)/100;
   zero_y = pic_origin_y - (pic->draw->bbox.y0 * scale_percent_y)/100;

   /* Output the draw objects in this picture */
   draw_output_objects
    ( d,
      shifting_size((shifting_ptr)d),
      zero_x,
      zero_y,
      scale_percent_x/100.0,
      scale_percent_y/100.0,
      map
    );
 }




unsigned draw_pic_estimate_save_size(const draw_pic* pic)
 { return shifting_size((shifting_ptr)&pic->draw);
 }




#ifndef NDEBUG
#include <stdio.h>

void draw_pic_debug_output(const draw_pic* pic)
 { fprintf
    ( stderr,
      " Draw file size: %u bytes\n",
      shifting_size((shifting_ptr)&pic->draw)
    );
 }
#endif
