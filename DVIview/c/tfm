/** tfm.c **/
/* Loads in and manages tfm files
 * (c) Paul Field 1995
 */

#include "tfm.h"

#include <assert.h>
#include <stdio.h>
#include <string.h>

#include "allocate.h"
#include "ci_string.h"
#include "exception.h"
#include "list.h"
#include "message.h"

#include "file.h"
#include "file_error.h"
#include "font_file.h"



/** Some macros for decoding BigEndian numbers **/
#define bytes_to_unsigned_2(b) ((b)[0]*256 + (b)[1])
#define bytes_to_4(b) (((b)[0] << 24) | ((b)[1] << 16) | ((b)[2] << 8) | (b)[3])



struct tfm_str
 { unsigned references;
   char*    font_name;
   unsigned char smallest_char;
   unsigned char largest_char;
   int   checksum;
   char* width_index;
   char* height_index;
   char* depth_index;
   int*  width_table;
   int*  height_table;
   int*  depth_table;
 };


/* List of all tfm structures in existance */
static list* all_metrics = NULL;



/* Function for validating tfm structure in debugging code */
#ifndef NDEBUG
static void tfm_validate(const tfm* metrics)
 { assert(metrics != NULL);
   assert(metrics->references > 0);
   assert(metrics->font_name != NULL);
   assert(metrics->smallest_char <= metrics->largest_char+1);
 }
#else
#define tfm_validate(m)
#endif




tfm* tfm_read(const char* font_name)
 { byte  buffer[1024+128];
   file* tfm_file;
   tfm*  metrics;

   assert(font_name);

   /* See if the tfm for font_name is already loaded */
   if (all_metrics != NULL)
    { list_ptr lptr;

      /* Look for metrics in all_metrics list */
      for (lptr = list_ptr_head(all_metrics); !list_ptr_past_the_end(lptr); list_ptr_inc(&lptr))
       { tfm* metrics;

         metrics = list_ptr_element(lptr);
         if (case_insensitive_strcmp(font_name, metrics->font_name) == 0)
          { /* tfm found - return a new reference to it */
            metrics->references++;
            return metrics;
          }
       }
    }

   tfm_file = file_construct(font_file_name(font_name, "tfm"));

   try
    { unsigned file_length;
      unsigned header_length;
      unsigned smallest_char;
      unsigned largest_char;
      unsigned width_table_words;
      unsigned height_table_words;
      unsigned depth_table_words;

      file_read(tfm_file, buffer, 7*2);

      /* Read in lengths of various "portions" of the tfm file */
      file_length        = bytes_to_unsigned_2(&buffer[0]);
      header_length      = bytes_to_unsigned_2(&buffer[2]);
      smallest_char      = bytes_to_unsigned_2(&buffer[4]);
      largest_char       = bytes_to_unsigned_2(&buffer[6]);
      width_table_words  = bytes_to_unsigned_2(&buffer[8]);
      height_table_words = bytes_to_unsigned_2(&buffer[10]);
      depth_table_words  = bytes_to_unsigned_2(&buffer[12]);

      if (smallest_char > (int)largest_char+1 ||
          largest_char > 255                  ||
          width_table_words > 256             ||
          height_table_words > 16             ||
          height_table_words > 16
         )
       { file_error_named_throw(font_name, "tfm", "HeaderCorrupt");
       }

       {
         /* Allocate a block of memory for the tfm data structure
          * and set up pointers to various areas within that area
          */
         unsigned number_chars;
         unsigned table_offset;
         unsigned data_size;

         number_chars = largest_char - smallest_char + 1;
         table_offset = (3*number_chars+3) & ~3;  /* Align to first word boundary past indexes */
         data_size = sizeof(struct tfm_str) + table_offset +
                     (width_table_words + height_table_words + depth_table_words)*sizeof(int);

         metrics = list_alloc_element(data_size);

         try
          { unsigned c;
            unsigned tables_size;
            int      w;
            byte*    raw_word;

            metrics->references    = 1;
            metrics->font_name     = NULL;
            metrics->smallest_char = smallest_char;
            metrics->largest_char  = largest_char;
            metrics->width_index   = (char *)metrics + sizeof(struct tfm_str);
            metrics->height_index  = metrics->width_index  + number_chars;
            metrics->depth_index   = metrics->height_index + number_chars;
            metrics->width_table   = (int *)((char *)metrics + sizeof(struct tfm_str) + table_offset);
            metrics->height_table  = metrics->width_table + width_table_words;
            metrics->depth_table   = metrics->height_table + height_table_words;

            assert((char *)(metrics->depth_table + depth_table_words) == (char *)(metrics) + data_size);

            metrics->font_name = memory_allocate(strlen(font_name)+1);
            strcpy(metrics->font_name, font_name);

            /* Read in the checksum */
            file_read_at(tfm_file, buffer, 4, 24);
            metrics->checksum = bytes_to_4(buffer);


            /* Read in and decode the width, height and depth index arrays */

            file_read_at(tfm_file, buffer, number_chars*4, (6+header_length)*4);


            for (c = 0; c < number_chars; c++)
             { metrics->width_index[c]  = buffer[c*4];
               metrics->height_index[c] = buffer[c*4+1]/16;
               metrics->depth_index[c]  = buffer[c*4+1]%16;
             }

            /* Read in and decode the width, height and depth tables */
            tables_size = (width_table_words + height_table_words + depth_table_words) * 4;
            assert(tables_size < sizeof(buffer));

            file_read(tfm_file, buffer, tables_size);

            raw_word = buffer;

            for (w = 0; w < width_table_words; w++)
             { metrics->width_table[w] = bytes_to_4(raw_word);
               raw_word += 4;
             }

            for (w = 0; w < height_table_words; w++)
             { metrics->height_table[w] = bytes_to_4(raw_word);
               raw_word += 4;
             }

            for (w = 0; w < depth_table_words; w++)
             { metrics->depth_table[w] = bytes_to_4(raw_word);
               raw_word += 4;
             }

            assert(raw_word == buffer+tables_size);

            file_destruct(tfm_file);

            /* Add tfm structure to list of all tfms */
            if (all_metrics == NULL)
             { all_metrics = list_create();
             }
            list_cons(all_metrics, metrics);

          }
         catch
          { memory_free(metrics->font_name);
            list_free_element(metrics);
            file_error_named_throw(font_name, "tfm", "FileCorrupt");
          }
         catch_end
       }
    }
   catch
    { file_destruct(tfm_file);
      throw();
      metrics = NULL; /* Avoid compiler warning: metrics used before set */
    }
   catch_end

   return metrics;
 }




void tfm_destruct(tfm* metrics)
 { if (metrics != NULL)
    { tfm_validate(metrics);

      if (--metrics->references == 0)
       { list_ptr lptr;

         /* Remove metrics from all_metrics list */
         for (lptr = list_ptr_head(all_metrics); !list_ptr_past_the_end(lptr); list_ptr_inc(&lptr))
          { if (list_ptr_element(lptr) == metrics)
             { list_ptr_remove_element(lptr);
               break; /* Element found - stop searching */
             }
          }

         memory_free(metrics->font_name);
         list_free_element(metrics);
       }
    }
 }




bool tfm_checksum_matches(const tfm* metrics, int checksum)
 { return (metrics->checksum == 0 || checksum == 0 || metrics->checksum == checksum);
 }



bool tfm_contains_char(const tfm* metrics, unsigned char c)
 { tfm_validate(metrics);

   return (metrics->smallest_char <= c && c <= metrics->largest_char);
 }




int tfm_char_width(const tfm* metrics, unsigned char c)
 { tfm_validate(metrics);
   assert(tfm_contains_char(metrics, c));

   return metrics->width_table[metrics->width_index[c - metrics->smallest_char]];
 }




void tfm_bounds(const tfm* metrics, const unsigned char* s, unsigned length, int* height, int* depth)
 { int                  max_height;
   int                  max_depth;
   const unsigned char* c;

   tfm_validate(metrics);

   max_height = 0;
   max_depth = 0;

   for(c = s; c < s+length; c++)
    { int char_height;
      int char_depth;

      assert(tfm_contains_char(metrics, *c));

      char_height = metrics->height_table[metrics->height_index[*c - metrics->smallest_char]];
      if (char_height > max_height)
       { max_height = char_height;
       }

      char_depth  = metrics->depth_table[ metrics->depth_index[*c - metrics->smallest_char]];
      if (char_depth > max_depth)
       { max_depth = char_depth;
       }
    }
   *height = max_height;
   *depth = max_depth;
 }




#ifndef NDEBUG

static void tfm_debug_output_table(const int* table, unsigned elements, const char* name)
 { unsigned i;

   fprintf(stderr, "\n  %s:", name);
   for (i = 0; i < elements; i++)
    { if (i%10 == 0)
       { fprintf(stderr, "\n    %3u : ",i);
       }
      fprintf(stderr, "%1.3f ", table[i]/(double)(1u<<20));
    }
 }




void tfm_debug_output(const tfm* metrics)
 { unsigned n;
   unsigned i;
   unsigned max;

   tfm_validate(metrics);

   fprintf
    ( stderr,
      "Metrics:\n"
      "  Name '%s'\n"
      "  References %u\n"
      "  Chars %u-%u\n"
      "  Checksum %d\n"
      "  Index table: (width height depth)",
      metrics->font_name,
      metrics->references,
      metrics->smallest_char,
      metrics->largest_char,
      metrics->checksum
    );

   n = metrics->largest_char - metrics->smallest_char + 1;
   for (i = 0; i < n; i++)
    { if (i%10 == 0)
       { fprintf(stderr, "\n    %3u : ",i);
       }
      fprintf(stderr, "(%3u %3u %3u)  ", metrics->width_index[i], metrics->height_index[i], metrics->depth_index[i]);
    }
   tfm_debug_output_table(metrics->width_table,  metrics->height_table - metrics->width_table, "Width");
   tfm_debug_output_table(metrics->height_table, metrics->depth_table - metrics->height_table, "Height");

   /* Can't easily calculate length of depth table - find max index used instead */
   max = 0;
   for (i = 0; i < n; i++)
    { if (metrics->depth_index[i] > max)
       { max = metrics->depth_index[i];
       }
    }
   tfm_debug_output_table(metrics->depth_table, max+1, "Depth");
   fputs("\n\n", stderr);
 }
#endif
