/* DVIview
 * (c) Paul Field 1995
 */

#include <stdio.h>
#include <string.h>

#include "hourglass.h"

#include "application.h"
#include "nev_message.h"
#include "nev_wimp.h"
#include "shifting.h"

#include "choices.h"
#include "document.h"
#include "font_summary.h"
#include "log.h"
#include "optionfile.h"
#include "papersize.h"
#include "render_list.h"
#include "sys_font_list.h"

//#include "MemCheck:MemCheck.h"


enum
 { Filetype_DVI = 0xce4,
   Filetype_Directory = 0x1000
 };


//#include "HierProf:HierProf.h"
static bool dviview_quit(void)
 { /*HierProf_OutputNow();*/

   render_list_destruct();
   sys_font_list_destruct();
   font_summary_destruct();

   return TRUE;
 }




static void acknowledge_load(wimp_message *message)
 { wimp_message msg;

   msg = *message;
   msg.your_ref = msg.my_ref;
   msg.action   = message_DATA_LOAD_ACK;
   wimp_send_message(wimp_USER_MESSAGE, &msg, msg.sender);
 }




static nevent_result data_open(wimp_message *message, void *handle)
 { NOT_USED(handle);

   if (message->data.data_xfer.file_type == Filetype_DVI)
    { /* Acknowledge load *BEFORE* loading so that if we fail to load the
       * Filer will not attempt to load another copy of DVIview
       */
      acknowledge_load(message);

      document_construct(message->data.data_xfer.file_name);
      return nevent_HANDLED;
    }
   return nevent_NOT_HANDLED;
 }




static nevent_result data_load(wimp_message *message, void *handle)
 { NOT_USED(handle);

   if (message->data.data_xfer.w == wimp_ICON_BAR)
    { if (message->data.data_xfer.file_type == Filetype_DVI)
       { document_construct(message->data.data_xfer.file_name);
         acknowledge_load(message);
         return nevent_HANDLED;
       }

      if (message->data.data_xfer.file_type == Filetype_Directory)
       { char *file_name;

         file_name = memory_allocate(strlen(message->data.data_xfer.file_name) + strlen(".dvi") + 1);
         strcpy(file_name, message->data.data_xfer.file_name);
         strcat(file_name, ".dvi");
         document_construct(file_name);
         acknowledge_load(message);
         memory_free(file_name);

         return nevent_HANDLED;
       }
    }
   return nevent_NOT_HANDLED;
 }




static void unset_running_variable()
 { system("Unset DVIview$Running");
 }




static void dviview_initialise(int argc, char *argv[])
 { unsigned i;


#if !defined(NDEBUG) || defined(HierProf_PROFILE)
   /* Redirect error stream */
   /*freopen("pipe:$.debug", "w", stderr);    - redirection disabled: I want output going to a file */
   setbuf(stderr, NULL);
#endif



   nevent_wimp_initialise();
   nevent_message_register_handler(message_DATA_OPEN, data_open, 0);
   nevent_message_register_handler(message_DATA_LOAD, data_load, 0);

   shifting_initialise_for_toolbox();
   shifting_allow_malloc_extension();

   hourglass_on();

   log_init();
   document_init();
   viewer_init();
   choices_init();
   papersize_init();
   sys_font_list_construct();
   font_summary_construct();
   render_list_construct();

   optionsfile_load();

   hourglass_off();

   /* load in and view any files specified on the command line */
   for (i = 1; i < argc; i++)
    { document_construct(argv[i]);
    }

   system("Set DVIview$Running Yes");
   atexit(unset_running_variable);
 }



/* Respond to all actions and messages */
/* Automatically generated by ToolLib */
static const int toolbox_actions[] =
 { 0x100,
   0x101,
   0x102,
   0x103,
   0x104,
   0x105,
   0x106,
   0x107,
   0x108,
   0x109,
   0x10a,
   0x10b,
   0x10c,
   0x200,
   0x201,
   0x202,
   0x203,
   0x300,
   0x301,
   0x302,
   0x303,
   0x400,
   0x401,
   0x402,
   0x403,
   0x410,
   0x411,
   0x420,
   0x500,
   0x501,
   0x600,
   0x601,
   0xf00,
   0x44ec0,
   0x82880,
   0x82883,
   0x8288d,
   0x82890,
   0x82a91,
   0x82ac0,
   0x82bc0,
   0x82bc2,
   0x82bc3,
   0x82c00,
   0x82c02,
   0
 };


static const int wimp_messages[]   =
 { 0x3,
   0x5,
   0x8,
   0
 };



/* The variable which the application system required */
application this_application =
 { "<DVIview$Dir>",
   310,
   toolbox_actions,
   wimp_messages,
   47,
   dviview_initialise,
   dviview_quit
 };

